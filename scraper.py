from bs4 import BeautifulSoup
import requests as r

# Generated by Selenium IDE
import pytest
from time import sleep
import json
import time
import webbrowser
from random import randint
import urllib.request as urlr
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
class TideLoadMore():
  def setup_method(self):
    options = Options()
    self.driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
    self.vars = {}
  
  def teardown_method(self):
    self.driver.quit()
  
  def tideloadmore(self):
    # Test name: test1
    # Step # | name | target | value | comment
    # 1 | open | https://tide.com/en-us/shop |  | 
    self.driver.get("https://tide.com/en-us/shop")
    # 2 | setWindowSize | 1710x948 |  | 
    self.driver.set_window_size(1710, 948)
    # 3 | click | css=.lilo3746-close-link |  | 
    wait = WebDriverWait(self.driver, 5)
    element = wait.until(EC.saa((By.CSS_SELECTOR, "your-css-selector")))
    self.driver.find_element(By.CSS_SELECTOR, ".lilo3746-close-link").click()
    # 4 | click | css=.button-link |  | 
    self.driver.find_element(By.CSS_SELECTOR, ".button-link").click()
    # 5 | mouseOver | css=.button-link |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".button-link")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 6 | mouseOut | css=.button-link |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    # 7 | mouseOver | css=.col-lg-4:nth-child(10) .product-preview-title > p |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".col-lg-4:nth-child(10) .product-preview-title > p")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 8 | mouseOut | css=.col-lg-4:nth-child(10) .product-preview-title > p |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    # 9 | click | css=.button-link |  | 
    self.driver.find_element(By.CSS_SELECTOR, ".button-link").click()
    # 10 | mouseOver | css=.button-link |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".button-link")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 11 | mouseOut | css=.button-link |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    # 12 | mouseOver | css=.col-lg-4:nth-child(19) .product-preview-title > p |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".col-lg-4:nth-child(19) .product-preview-title > p")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 13 | mouseOut | css=.col-lg-4:nth-child(19) .product-preview-title > p |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    # 14 | click | css=.button-link |  | 
    self.driver.find_element(By.CSS_SELECTOR, ".button-link").click()
    # 15 | mouseOver | css=.button-link |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".button-link")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 16 | mouseOut | css=.button-link |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    # 17 | mouseOver | css=.col-lg-4:nth-child(28) strong |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".col-lg-4:nth-child(28) strong")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 18 | mouseOut | css=.col-lg-4:nth-child(28) strong |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    # 19 | runScript | window.scrollTo(0,11633) |  | 
    self.driver.execute_script("window.scrollTo(0,11633)")
    # 20 | click | css=.button-link |  | 
    self.driver.find_element(By.CSS_SELECTOR, ".button-link").click()
    # 21 | mouseOver | css=.button-link |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".button-link")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 22 | runScript | window.scrollTo(0,13654) |  | 
    self.driver.execute_script("window.scrollTo(0,13654)")
    # 23 | click | css=.button-link |  | 
    self.driver.find_element(By.CSS_SELECTOR, ".button-link").click()
    # 24 | runScript | window.scrollTo(0,16293) |  | 
    self.driver.execute_script("window.scrollTo(0,16293)")
    # 25 | mouseOut | css=.button-link |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    # 26 | click | css=.button-link |  | 
    self.driver.find_element(By.CSS_SELECTOR, ".button-link").click()
#End Selenium Code



def main():
  maxwong = TideLoadMore()
  maxwong.setup_method()
  maxwong.tideloadmore()
  maxwong.handle_alert()
  url = r.get("https://tide.com/en-us/shop")
  url.raise_for_status()                            # Handles HTTP error
  soup = BeautifulSoup(url.text, "html.parser")
  products = soup.find_all(class_="product-preview-title")
  print(products)

  # soup = BeautifulSoup(html, "html.parser")
  # products = soup.find_all(class_="product-preview-title")
  # descriptions = soup.find_all(class_="product-preview-description")
  # price = soup.find_all(class_="ps-price")
  # img = soup.find_all(class_="ps-product-image inline")

  # print(len(products))

if __name__ == "__main__":
    main()