from bs4 import BeautifulSoup
import requests as r

# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options


class TestTideloadmore():
  def setup_method(self):
    options = Options()
    self.driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()

  def handle_alert(driver):
    try:
        # Wait for the alert to appear
        WebDriverWait(driver, 10).until(expected_conditions.alert_is_present())
        
        # Switch to alert and accept it (click OK)
        alert = driver.switch_to.alert
        alert.dismiss()
        print("Alert accepted.")
    except:
        print("No alert found.")

  def test_tideloadmore(self):
    # Test name: tide load more
    # Step # | name | target | value | comment
    # 1 | open | /en-us/shop |  | 
    self.driver.get("https://tide.com/en-us/shop")
    # 2 | setWindowSize | 1303x924 |  | 
    self.driver.set_window_size(1303, 924)
    # 3 | runScript | window.scrollTo(0,421) |  | 
    self.driver.execute_script("window.scrollTo(0,421)")
    # 4 | runScript | window.scrollTo(0,3143) |  | 
    self.driver.execute_script("window.scrollTo(0,3143)")
    # 5 | selectFrame | index=8 |  | 
    WebDriverWait(self.driver, 30).until(expected_conditions.visibility_of_element_located((By.ID, "ember7")))
    self.driver.switch_to.frame(8)
    try:
        # Wait for the alert to appear
        WebDriverWait(self.driver, 10).until(expected_conditions.alert_is_present())
        
        # Switch to alert and accept it (click OK)
        alert = self.driver.switch_to.alert
        alert.dismiss()
        print("Alert accepted.")
    except:
        print("No alert found.")
    # 6 | click | css=.campaign-logo-wrapper |  | 
    self.driver.find_element(By.CSS_SELECTOR, ".campaign-logo-wrapper").click()
    # 7 | selectFrame | relative=parent |  | 
    self.driver.switch_to.default_content()
    # 8 | click | css=.lilo3746-close-link |  | 
    self.driver.find_element(By.CSS_SELECTOR, ".lilo3746-close-link").click()
    # 9 | click | css=.button-link |  | 
    self.driver.find_element(By.CSS_SELECTOR, ".button-link").click()
    # 10 | mouseOver | css=.button-link |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".button-link")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 11 | mouseOut | css=.button-link |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    # 12 | mouseOver | css=.col-lg-4:nth-child(10) .product-preview-title > p |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".col-lg-4:nth-child(10) .product-preview-title > p")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 13 | mouseOut | css=.col-lg-4:nth-child(10) .product-preview-title > p |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    # 14 | click | css=.button-link |  | 
    self.driver.find_element(By.CSS_SELECTOR, ".button-link").click()
    # 15 | mouseOver | css=.button-link |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".button-link")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 16 | mouseOut | css=.button-link |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    # 17 | mouseOver | css=.col-lg-4:nth-child(19) .product-preview-title > p |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".col-lg-4:nth-child(19) .product-preview-title > p")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 18 | mouseOut | css=.col-lg-4:nth-child(19) .product-preview-title > p |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    # 19 | click | css=.button-link |  | 
    self.driver.find_element(By.CSS_SELECTOR, ".button-link").click()
    # 20 | mouseOver | css=.button-link |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".button-link")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 21 | mouseOut | css=.button-link |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    # 22 | mouseOver | css=.col-lg-4:nth-child(28) .product-preview-title > p |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".col-lg-4:nth-child(28) .product-preview-title > p")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 23 | mouseOut | css=.col-lg-4:nth-child(28) .product-preview-title > p |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    # 24 | runScript | window.scrollTo(0,8710) |  | 
    self.driver.execute_script("window.scrollTo(0,8710)")
    # 25 | click | css=.button-link |  | 
    self.driver.find_element(By.CSS_SELECTOR, ".button-link").click()
    # 26 | mouseOver | css=.button-link |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".button-link")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 27 | mouseOut | css=.button-link |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    # 28 | mouseOver | css=.col-lg-4:nth-child(37) strong |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".col-lg-4:nth-child(37) strong")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 29 | mouseOut | css=.col-lg-4:nth-child(37) strong |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    # 30 | runScript | window.scrollTo(0,11635) |  | 
    self.driver.execute_script("window.scrollTo(0,11635)")
    # 31 | click | css=.button-link |  | 
    self.driver.find_element(By.CSS_SELECTOR, ".button-link").click()
    # 32 | mouseOver | css=.button-link |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".button-link")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 33 | mouseOut | css=.button-link |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    # 34 | mouseOver | css=.col-lg-4:nth-child(46) .product-preview-title > p |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, ".col-lg-4:nth-child(46) .product-preview-title > p")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 35 | runScript | window.scrollTo(0,15024) |  | 
    self.driver.execute_script("window.scrollTo(0,15024)")
    # 36 | mouseOut | css=.col-lg-4:nth-child(46) .product-preview-title > p |  | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    actions.move_to_element(element, 0, 0).perform()
    # 37 | click | css=.button-link |  | 

    self.driver.find_element(By.CSS_SELECTOR, ".button-link").click()

  def get_url(self):
   return self.driver.page_source
# End Selenium Code



def main():
    poop = TestTideloadmore()

    poop.setup_method()

    poop.test_tideloadmore()
    poop.handle_alert()

    html = poop.get_url()


    soup = BeautifulSoup(html, "html.parser")
    products = soup.find_all(class_="product-preview-title")
    descriptions = soup.find_all(class_="product-preview-description")
    price = soup.find_all(class_="ps-price")
    img = soup.find_all(class_="ps-product-image inline")

    print(len(products))

if __name__ == "__main__":
    main()